
# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module


# Find available port to run server on
port=$(find_port)

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# The `$CONFIG_FILE` environment variable is exported as it is used in the main
# `script.sh.erb` file when launching the Jupyter Notebook server.
export CONFIG_FILE="${PWD}/config.py"
export JUPYTER_CONFIG_DIR="${PWD}"


# Generate Jupyter configuration file with secure file permissions
(
umask 077
cat > "${CONFIG_FILE}" << EOL
c.ServerApp.ip = '*'
c.ServerApp.port = ${port}
c.ServerApp.port_retries = 0
c.ServerApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.ServerApp.base_url = '/node/${host}/${port}/'
c.ServerApp.open_browser = False
c.ServerApp.allow_origin = '*'
c.ServerApp.root_dir = '${HOME}'
c.ServerApp.disable_check_xsrf = True
c.ServerApp.jpserver_extensions = {"jupyterlab": True}
c.NotebookApp.nbserver_extensions = {"jupyterlab": True}
EOL
)



### This is to setup Tensorboard WebProxyServer

show_tb="hidden"
if [ <%= context.workflow %> = "tensorflow" ]; then
  show_tb=""
fi

echo ${show_tb} > ${HOME}/.ood_tensorboard.${host}.${port}

# find available port to run server on
app_port=$(find_port ${host})

#echo ${app_port} >>  ${PWD}/tensorboard.port

echo ${app_port} >> ${HOME}/.ood_tensorboard.${host}.${port}

# find available port to run the AuthRevProxy on
tb_port=$(find_port ${host})
export proxy_port=${tb_port}

# generate password
#tb_password="$(create_passwd 32)"

# export token for cookie verification by authrevproxy
# replace dashes by underscores in session.id
#export _ood_token_<%= session.id.gsub("-","_") %>=${tb_password}

# start authrevproxy, to authentify web requests to the application
#module load anaconda3/2019.10-gcc/8.3.1
#bin/authrevproxy.py --app-port=${app_port} --proxy-port=${proxy_port} &
